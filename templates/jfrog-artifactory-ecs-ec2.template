AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys the EC2 Autoscaling, LaunchConfig and Instance for Artifactory"
Parameters:
  VPCID:
    Description: The ID of your existing VPC (e.g., vpc-0343606e).
    Type: "AWS::EC2::VPC::Id"
  PrivateSubnet1ID:
    Type: 'AWS::EC2::Subnet::Id'
  PrivateSubnet2ID:
    Type: 'AWS::EC2::Subnet::Id'
  MinScalingNodes:
    Type: Number
  MaxScalingNodes:
    Type: Number
  InstanceType:
    Type: String
  VolumeSize:
    Type: Number 
  ClusterName:
    Description: Desired name for your cluster.
    Type: String
    Default: JFrog    
  DeploymentTag:
    Type: String
  ArtifactoryLicense:
    Type: String
  ArtifactoryServerName:
    Type: String
  CertificateDomain:
    Type: String
  ArtifactoryIAMAcessKey:
    Type: String
  SecretAccessKey:
    Type: String
  ArtifactoryS3Bucket:
    Type: String
  CertificateKey:
    Type: String
  Certificate:
    Type: String
  DBType:
    Type: String
  ArtifactoryDBEndpointAddress:
    Type: String
  DatabaseName:
    Type: String
  DatabaseUser:
    Type: String
  DatabasePassword:
    Type: String
  ArtifactoryPrimary:
    Type: String
  MasterKey:
    Type: String
  ArtifactoryVersion:
    Type: String
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName    
  ArtifactoryELB:
    Type: String
  SecurityGroups:
    Type: String
  AnsibleVaultPass:
    Description: Ansiblevault Password to secure the artifactory.yml
    Type: String
    NoEcho: 'true'    
  QSS3BucketName:
    Type: String
  QSS3KeyPrefix:
    Type: String
Mappings:
  AWSAMIRegionMap:
    AMI:
       AMZECSOTP: amzn-ami-2018.03.a-amazon-ecs-optimized
    us-east-2:
       AMI: ami-0307f7ccf6ea35750
    us-east-1:
       AMI: ami-045f1b3f87ed83659
    us-west-2:
       AMI: ami-01b70aea4161476b7
    us-west-1:
       AMI: ami-0285183bbef6224bd
    eu-west-3:
       AMI: ami-0f4738fbeb53e6c3a
    eu-west-2:
       AMI: ami-01bee3897bba49d78
    eu-west-1:
       AMI: ami-0627e141ce928067c
    eu-central-1:
       AMI: ami-0eaa3baf6969912ba
    eu-north-1:
       AMI: ami-03494b0c9e1c22492
    ap-northeast-2:
       AMI: ami-00294948a592fc052
    ap-northeast-1:
       AMI: ami-05b296a384694dfa4
    ap-southeast-2:
       AMI: ami-02c73ee1100ce3e7a
    ap-southeast-1:
       AMI: ami-050865a806e0dae53
    ca-central-1:
       AMI: ami-0f552e0a86f08b660
    ap-south-1:
       AMI: ami-01ef9f6a829ae3956
    sa-east-1:
       AMI: ami-084b1eee100c102ee
Conditions:
  GovCloudCondition: !Equals 
    - !Ref 'AWS::Region'
    - us-gov-west-1       
Resources:
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub
        ${ClusterName}-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
                - ec2.amazonaws.com
                - ecs.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: 
            Statement:
              - Effect: Allow
                Action:
                  - ecs:ListClusters
                  - ecs:ListServices
                  - ecs:DescribeServices
                  - ecr:ListImages
                  - ecs:RegisterTaskDefinition
                  - ecs:CreateService
                  - ecs:ListTasks
                  - ecs:DescribeTasks
                  - ecs:CreateService
                  - ecs:DeleteService
                  - ecs:UpdateService
                  - ecs:DescribeContainerInstances
                  - ecs:DescribeTaskDefinition
                  - application-autoscaling:DescribeScalableTargets
                  - iam:ListRoles
                Resource: "*"
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: /
      Roles: 
        - !Ref ECSRole
  ECSCluster: 
    #Condition: CreateECSCluster
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref ClusterName
  ArtifactoryScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref ArtifactoryLaunchConfiguration
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1ID
        - !Ref PrivateSubnet2ID
      MinSize: !Ref MinScalingNodes
      MaxSize: !Ref MaxScalingNodes
      Cooldown: '300'
      DesiredCapacity: !Ref MinScalingNodes
      LoadBalancerNames: 
        - !Ref ArtifactoryELB
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      Tags:
        - Key: Name
          Value: !Ref DeploymentTag
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M                
  ArtifactoryLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Authentication':
        S3AccessCreds:
          type: S3
          roleName: 
            - !Ref ECSRole #!Ref ArtifactoryHostRole
          buckets:
            - !Ref QSS3BucketName
      'AWS::CloudFormation::Init':
        configSets:
          artifactory_install:
            - "config-artifactory-master"
            - "secure-artifactory"
        config-artifactory-master:
          files:
            /root/.artifactory_ansible/artifactory.yml:
              content: !Sub |
                # Base install for Artifactory
                - import_playbook: site-artifactory.yml
                  vars:
                    ecs_deployment: true
                    artifactory_licenses: ${ArtifactoryLicense}
                    s3_endpoint: s3.${AWS::Region}.amazonaws.com
                    s3_access_key: ${ArtifactoryIAMAcessKey}
                    s3_access_secret_key: ${SecretAccessKey}
                    s3_bucket: ${ArtifactoryS3Bucket}
                    certificate_key: ${CertificateKey}
                    certificate: ${Certificate}
                    java_mysql_driver:
                      url: https://bintray.com/artifact/download/bintray/jcenter/mysql/mysql-connector-java/5.1.38/mysql-connector-java-5.1.38.jar
                      dest: /data/jfrog/artifactory/plugins/mysql-connector-java-5.1.38.jar
                      owner: root
                      group: root
                    rds_cert:
                      url: https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem
                      dest: /data/jfrog/artifactory/java_certs/rds-combined-ca-bundle.pem
                      owner: root
                      group: root
              mode: "0400"
            /root/.vault_pass.txt:
              content: !Sub |
                ${AnsibleVaultPass}
              mode: "0400"
            /root/.secureit.sh:
              content: /usr/local/bin/ansible-vault encrypt /root/.artifactory_ansible/artifactory.yml --vault-id /root/.vault_pass.txt
              mode: "0770"
        secure-artifactory:
          commands:
            'secure ansible playbook':
              command: '/root/.secureit.sh'
              ignoreErrors: 'false'
    Properties:
      AssociatePublicIpAddress: false
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref ECSInstanceProfile
      ImageId: !FindInMap 
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - AMI
      SecurityGroups:
        - !Ref SecurityGroups
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData: !Base64 
        'Fn::Sub':
          - >
            #!/bin/bash -x

            #CFN Functions

            function cfn_fail

            {

            cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region}
            --resource ArtifactoryScalingGroup

            exit 1

            }

            function cfn_success

            {

            cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region}
            --resource ArtifactoryScalingGroup

            exit 0

            }

            echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config

            S3URI=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}

            yum install -y git

            echo $PATH

            PATH=/usr/local/bin/:/opt/aws/bin:$PATH

            echo $PATH
            echo \'[Cloning: Load QuickStart Common Utils]\'

            git clone
            https://github.com/aws-quickstart/quickstart-linux-utilities.git

            source /quickstart-linux-utilities/quickstart-cfn-tools.source

            echo \'[Loaded: Load QuickStart Common Utils]\'

            echo \'[Update Operating System]\'

            qs_update-os || qs_err

            qs_bootstrap_pip || qs_err

            qs_aws-cfn-bootstrap || qs_err

            pip install awscli &> /var/log/userdata.awscli_install.log || qs_err " awscli install failed "
            
            pip install ansible &> /var/log/userdata.ansible_install.log || qs_err " ansible install failed "

            mkdir ~/.artifactory_ansible

            aws s3 sync s3://${QSS3BucketName}/${QSS3KeyPrefix}scripts/ ~/.artifactory_ansible/ 

            cfn-init -v --stack ${AWS::StackName} --resource
            ArtifactoryLaunchConfiguration --configsets artifactory_install
            --region ${AWS::Region} || cfn_fail

            export ANSIBLE_VAULT_PASSWORD_FILE="/root/.vault_pass.txt"

            /usr/local/bin/ansible-playbook /root/.artifactory_ansible/artifactory.yml

            rm -rf /root/.secureit.sh

            [ $(qs_status) == 0 ] && cfn_success || cfn_fail
          - S3Region: !If 
            - GovCloudCondition
            - s3-us-gov-west-1
            - s3
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: ECSCluster
      ServiceName: artifactory
      LaunchType: EC2
      DesiredCount: 1
      TaskDefinition:
        Ref: ArtifactoryTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - SecurityGroups
          Subnets:
            - Ref: PrivateSubnet1ID
            - Ref: PrivateSubnet2ID
  ArtifactoryTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "2048"
      Memory: "4096"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn:
        Fn::GetAtt: ECSRole.Arn
      ContainerDefinitions:
        - Name: artifactory
          Image: !Sub
            docker.bintray.io/jfrog/artifactory-pro:${ArtifactoryVersion}
          PortMappings:
            - ContainerPort: 8081
              HostPort: 8081
              Protocol: tcp
          MountPoints:
            - ContainerPath: /artifactory_extra_conf
              ReadOnly: False
              SourceVolume: /data/jfrog/artifactory/etc/
            - ContainerPath: /tmp/plugins
              ReadOnly: False
              SourceVolume: /data/jfrog/artifactory/tmp/plugins
            - ContainerPath: /artifactory_extra_certs
              ReadOnly: False
              SourceVolume: /data/jfrog/artifactory/java_certs
            - ContainerPath: /opt/jfrog/artifactory/tomcat/lib/
              ReadOnly: False
              SourceVolume: /data/jfrog/artifactory/plugins                           
          Ulimits:
            - Name: nproc
              SoftLimit: 65535
              HardLimit: 65535
            - Name: nofile
              SoftLimit: 32000
              HardLimit: 40000
          Environment:
            - Name: EXTRA_JAVA_OPTIONS
              Value: -Xmx4g
            - Name: ARTIFACTORY_MASTER_KEY
              Value: !Ref MasterKey
            - Name: HA_IS_PRIMARY
              Value: !Ref ArtifactoryPrimary
            - Name: DB_URL
              Value: !Sub
                jdbc:mysql://${ArtifactoryDBEndpointAddress}:3306/${DatabaseName}?characterEncoding=UTF-8&elideSetAutoCommits=true&verifyServerCertificate=true&useSSL=true&requireSSL=true 
            - Name: DB_TYPE
              Value: !Ref DBType
            - Name: DB_USER
              Value: !Ref DatabaseUser
            - Name: DB_PASSWORD
              Value: !Ref DatabasePassword
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: artifactory
        - Name: nginx
          Image: !Sub
            docker.bintray.io/jfrog/nginx-artifactory-pro:${ArtifactoryVersion}
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: tcp
            - ContainerPort: 443
              HostPort: 443
              Protocol: tcp
          DependsOn: 
            - Condition: HEALTHY
              ContainerName: artifactory
          Links:
            - artifactory
          MountPoints:
            - ContainerPath: /var/opt/jfrog/nginx
              ReadOnly: False
              SourceVolume: /data/jfrog/nginx
          Ulimits:
            - Name: nproc
              SoftLimit: 65535
              HardLimit: 65535
            - Name: nofile
              SoftLimit: 32000
              HardLimit: 40000
          Environment:
            - Name: ART_BASE_URL
              Value: http://artifactory:8081/artifactory
            - Name: SSL
              Value: "True"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: ECSLogGroup
              awslogs-region:
                Ref: AWS::Region
              awslogs-stream-prefix: nginx