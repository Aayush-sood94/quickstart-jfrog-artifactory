AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys Artifactory into an existing Kubernetes cluster"
Parameters:
  KubeManifestLambdaArn:
    Type: String
  HelmLambdaArn:
    Type: String
  KubeConfigPath:
    Type: String
  KubeConfigKmsContext:
    Type: String
  KubeGetLambdaArn:
    Type: String
  NumberOfSecondary:
    Type: Number
  AccessCIDR:
    Type: String
  ArtifactoryLicense1:
    Type: String
  ArtifactoryLicense2:
    Type: String
  ArtifactoryLicense3:
    Type: String
  ArtifactoryLicense4:
    Type: String
  ArtifactoryIAMAcessKey:
    Type: String
    NoEcho: 'true'
  SecretAccessKey:
    Type: String
    NoEcho: 'true'
  ArtifactoryS3Bucket:
    Type: String
  CertificateKey:
    Type: String
    NoEcho: 'true'
  Certificate:
    Type: String
  DatabaseUser:
    Type: String
    NoEcho: 'true'
  DatabasePassword:
    Type: String
    NoEcho: 'true'
  DBURL:
    Type: String
  DBDriver:
    Type: String
  DBPluginURL:
    Type: String
  DBPlugin:
    Type: String
  DBType:
    Type: String
  MasterKey:
    Type: String
    NoEcho: 'true'
  ArtifactoryVersion:
    Type: String
  ProDockerRepo:
    Type: String
  NginxDockerRepo:
    Type: String
  ArtifactoryDeploymentSize:
    Type: String
  ReleaseStage:
    Type: String
    Default: BETA
Mappings:
  HelmRepoMap:
    BETA:
      RepoUrl: https://earlyaccess.jfrog.io/artifactory/helm/
      HelmChartVersion: 2.0.11
    GA:
      RepoUrl: https://charts.jfrog.io/
      HelmChartVersion: 2.0.11
  DeploymentSize:
    Large:
      requestsMem: "6Gi"
      requestsCpu: "4"
      limitsMem: "10Gi"
      limitsCpu: "8"
      javaOptsXms: "6g"
      javaOptsXmx: "8g"
    Medium:
      requestsMem: "4Gi"
      requestsCpu: "2"
      limitsMem: "8Gi"
      limitsCpu: "6"
      javaOptsXms: "4g"
      javaOptsXmx: "6g"
    Small:
      requestsMem: "4Gi"
      requestsCpu: "2"
      limitsMem: "6Gi"
      limitsCpu: "4"
      javaOptsXms: "4g"
      javaOptsXmx: "4g"

Resources:
  NameSpace:
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Namespace
        apiVersion: v1
        metadata:
          name: jfrog-artifactory
          labels:
            app: artifactory

  CertificateStore:
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-nginx-tls
          namespace: jfrog-artifactory
          labels:
            app: artifactory
            chart: artifactory
        type: kubernetes.io/tls
        data:
          tls.crt:
            Fn::Base64:
              !Join ["\n", "Fn::Split": ["|", !Ref Certificate]]
          tls.key:
            Fn::Base64:
              !Join ["\n", "Fn::Split": ["|", !Ref CertificateKey]]

  LicenseStore:
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-cluster-license
          namespace: jfrog-artifactory
          labels:
            app: artifactory
            chart: artifactory
        type: Opaque
        stringData:
          art.lic: !Sub
            >-
            ${ArtifactoryLicense1}


            ${ArtifactoryLicense2}


            ${ArtifactoryLicense3}


            ${ArtifactoryLicense4}

  SecureStoreDB:
    DependsOn: NameSpace
    Type: "Custom::KubeManifest"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeManifestLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Manifest:
        kind: Secret
        apiVersion: v1
        metadata:
          name: artifactory-cluster-db
          namespace: jfrog-artifactory
          labels:
            app: artifactory
            chart: artifactory
        type: Opaque
        data:
          db-user:
            Fn::Base64:
              !Sub ${DatabaseUser}
          db-password:
            Fn::Base64:
              !Sub ${DatabasePassword}
          db-url:
            Fn::Base64:
              !Sub ${DBURL}

  ArtifactoryDeployment:
    Type: "Custom::Helm"
    DependsOn:
      - LicenseStore
      - CertificateStore
    Version: '1.0'
    Properties:
      ServiceToken: !Ref HelmLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Namespace: jfrog-artifactory
      Name: quickstart-artifactory-ha
      Chart: jfrog/artifactory-ha
      RepoUrl: !FindInMap [HelmRepoMap, !Ref ReleaseStage, RepoUrl]
      # If we want to test specific version of the Helm chart, we can pass it herefjq
      Version: !FindInMap [HelmRepoMap, !Ref ReleaseStage, HelmChartVersion]
      ValueYaml: !Sub
        - |
          artifactory:
            name: artifactory-ha
            image:
              repository: ${ProDockerRepo}
              version: ${ArtifactoryVersion}
              pullPolicy: Always
            deleteDBPropertiesOnStartup: true
            license:
              secret: artifactory-cluster-license
              dataKey: art.lic
            masterKey: ${MasterKey}
            preStartCommand: "mkdir -p /var/opt/jfrog/artifactory/bootstrap/artifactory/tomcat/lib/; wget -O  /var/opt/jfrog/artifactory/bootstrap/artifactory/tomcat/lib/${DBPlugin} ${DBPluginURL}"
            persistence:
              enabled: false
              type: aws-s3
              awsS3:
                endpoint: s3.${AWS::Region}.amazonaws.com
                region: ${AWS::Region}
                identity: ${ArtifactoryIAMAcessKey}
                credential: ${SecretAccessKey}
                bucketName: ${ArtifactoryS3Bucket}
            service:
              pool: all
            primary:
              resources:
                requests:
                  memory: "${requests_memory}"
                  cpu: "${requests_cpu}"
                limits:
                  memory: "${limits_memory}"
                  cpu: "${limits_cpu}"
              javaOpts:
                xms: "${java_xms}"
                xmx: "${java_xmx}"
              nodeSelector:
                partition: artifactory-primary
            node:
              replicaCount: ${NumberOfSecondary}
              resources:
                requests:
                  memory: "${requests_memory}"
                  cpu: "${requests_cpu}"
                limits:
                  memory: "${limits_memory}"
                  cpu: "${limits_cpu}"
              javaOpts:
                xms: "${java_xms}"
                xmx: "${java_xmx}"
              nodeSelector:
                partition: artifactory-secondary
              ## Only used if "affinity" is empty
              podAntiAffinity:
                ## Valid values are "soft" or "hard"; any other value indicates no anti-affinity
                type: "soft"
                topologyKey: "kubernetes.io/hostname"
          postgresql:
            enabled: false
          database:
            type: ${DBType}
            driver: ${DBDriver}
            secrets:
              user:
                name: artifactory-cluster-db
                key: "db-user"
              password:
                name: artifactory-cluster-db
                key: "db-password"
              url:
                name: artifactory-cluster-db
                key: "db-url"
          nginx:
            enabled: true
            image:
              repository: ${NginxDockerRepo}
              version: ${ArtifactoryVersion}
            replicaCount: 3
            service:
              loadBalancerSourceRanges:  [ "${AccessCIDR}" ]
            tlsSecretName: artifactory-nginx-tls
        - {
           requests_memory: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, requestsMem],
           requests_cpu: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, requestsCpu],
           limits_memory: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, limitsMem],
           limits_cpu: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, limitsCpu],
           java_xms: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, javaOptsXms],
           java_xmx: !FindInMap [DeploymentSize, !Ref ArtifactoryDeploymentSize, javaOptsXmx],
          }
  IngressHostName:
    DependsOn: ArtifactoryDeployment
    Type: "Custom::KubeGet"
    Version: '1.0'
    Properties:
      ServiceToken: !Ref KubeGetLambdaArn
      KubeConfigPath: !Ref KubeConfigPath
      KubeConfigKmsContext: !Ref KubeConfigKmsContext
      Namespace: jfrog-artifactory
      Name: svc/quickstart-artifactory-ha-nginx
      JsonPath: '{.status.loadBalancer.ingress[0].hostname}'
Outputs:
  ArtifactoryUrl:
    Value: !Sub https://${IngressHostName}
